/*******************************************************************************
 * Copyright (c) 2014 uniVocity Software Pty Ltd. All rights reserved.
 * This file is subject to the terms and conditions defined in file
 * 'LICENSE.txt', which is part of this source code package.
 ******************************************************************************/
package com.univocity.articles.importcities.databases;

import com.univocity.api.entity.jdbc.*;

/**
 * A {@link Database} implementation for Oracle Express
 *
 * @author uniVocity Software Pty Ltd - <a href="mailto:dev@univocity.com">dev@univocity.com
 *
 */
class OracleXEDatabase extends Database {

	@Override
	public String getDatabaseName() {
		return "OracleXE";
	}

	@Override
	String getDriverClassName() {
		return "oracle.jdbc.driver.OracleDriver";
	}

	@Override
	public void applyDatabaseSpecificConfiguration(JdbcDataStoreConfiguration jdbcDataStoreConfig) {
		/*
		 * By default, uniVocity uses java.sql.Connection.TRANSACTION_REPEATABLE_READ.
		 * The ojdbc6 driver does not support this transaction isolation level so we need to adjust it here
		 */
		jdbcDataStoreConfig.setTransactionIsolationLevel(java.sql.Connection.TRANSACTION_READ_COMMITTED);

		/*
		 * uniVocity identifies autogenerated keys for most databases automatically. But Oracle, before version 12, did not
		 * have such feature built in. Users had to create a sequence and a trigger to generate a value for the field upon insertion.
		 *
		 * In such cases, if you want to handle generated keys in your mappings,
		 * you need to provide information about which fields are generated explicitly.
		 */
		jdbcDataStoreConfig.getEntityConfiguration("region").configureField("id").setGenerated(true);
		jdbcDataStoreConfig.getEntityConfiguration("city").configureField("id").setGenerated(true);
	}
}
